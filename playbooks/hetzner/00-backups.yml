---
- name: Create Longhorn backups
  hosts: vm
  tags: backup
  tasks:
    - name: Get Longhorn volumes
      become: true
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Volume
        api_version: longhorn.io/v1beta2
      register: longhorn_volumes

    - name: Create list of backup names
      ansible.builtin.set_fact:
        longhorn_volumes_map: "{{ longhorn_volumes_map | default([]) +
          [{'volumeName': item.metadata.name,
          'pvName': item.status.kubernetesStatus.pvName,
          'pvcName': item.status.kubernetesStatus.pvcName,
          'namespace': item.status.kubernetesStatus.namespace}] }}"
      loop: "{{ longhorn_volumes.resources }}"

    - name: Write out to file per host
      ansible.builtin.copy:
        content: "{{ longhorn_volumes_map | to_nice_json }}"
        dest: "/tmp/longhorn_volumes_map_{{ inventory_hostname }}.json"
        mode: '0644'
      delegate_to: localhost
      when: longhorn_volumes_map is defined

    - name: Create snapshot for every volume
      become: true
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: longhorn.io/v1beta2
          kind: Snapshot
          metadata:
            name: "pre-reset-{{ item.metadata.name }}"
            namespace: longhorn-system
          spec:
            createSnapshot: true
            labels: null
            volume: "{{ item.metadata.name }}"
      loop: "{{ longhorn_volumes.resources }}"
      when: longhorn_volumes_map is defined

    - name: Create backup for every snapshot
      become: true
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: longhorn.io/v1beta2
          kind: Backup
          metadata:
            labels:
              backup-volume: "{{ item.metadata.name }}"
            name: "pre-reset-{{ item.metadata.name }}"
            namespace: longhorn-system
          spec:
            snapshotName: "pre-reset-{{ item.metadata.name }}"
            syncRequestedAt: '0000-01-01T00:00:00Z'
      loop: "{{ longhorn_volumes.resources }}"
      when: longhorn_volumes_map is defined

    - name: Wait for backup to have status.state completed
      become: true
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Backup
        api_version: longhorn.io/v1beta2
        namespace: longhorn-system
        name: "pre-reset-{{ item.metadata.name }}"
      loop: "{{ longhorn_volumes.resources }}"
      register: longhorn_backup
      until: longhorn_backup.resources[0].status.state == 'Completed'
      retries: 180
      delay: 10
      when: longhorn_volumes_map is defined

...
